clear
cls
help()
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 1/testes_em_R.R")
4+10
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 1/testes_em_R.R")
2+3
print("Hello WOrld")
print("Hello WOrld")
2+3
a <- 10
2+3
print("Hello WOrld")
x <- 10 # atribuindo variável
plot(rnorm(100))
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 1/testes_em_R.R")
clear
install.packages(h20)
install.packages("h2o")
install.packages("devtools")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
detach("package:h2o", unload = TRUE)
library(h2o)
detach("package:h2o", unload = TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
R.version
ls()
str(x)
class(x)
ls
dir
cd g:
cd keys
pdf("grafico.pdf")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 2/scripts_da_aula_2.R")
cd("keys")
# Exemplo de comandos
# Criando um vetor de inteiros
1:30
# Criando um vetor(inicio, fim, salto)
seq(1, 200, 3)
# Comando matematicos basicos
2 * 2 - ( 4 + 4) / 2
5+
2
5%5
5/5
eitaele
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 3/scripts_da_aula_3.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 3/scripts_da_aula_3.R")
# Exemplo de chamanda de função (função nativa media em um vetor gerador)
mean(1:30)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 3/scripts_da_aula_3.R")
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Aula 3/scripts_da_aula_3.R")
a <- 99
class(a)
a <- 99
typeof(a)
class(a)
a <- 99l
a <- 99L
typeof(a)
class(a)
a <- "R é legal"
class(a)
b <- 10.5
class(b)
c <- 8
class(c)
d <- 1 + 2i
class(d)
e <- b>c
class(e)
as.character(a)
as.complex(b)
as.numeric(c)
as.integer(d)
as.logical(e)
# Operações aritimeticas
a = 1 + 1 # Adição
b = 4 - 2 # Subtração
c = 2 * 3 # Multiplicação
d = 5 / 3 # Divisão
e = 4 ^ 2 # Potência
f = 5 %% 3 # Resto da Divisão
g = 5 %/% 3 # Parte Inteira da Divisão
# Operações aritimeticas
a = 1 + 1 # Adição
b = 4 - 2 # Subtração
c = 2 * 3 # Multiplicação
d = 5 / 3 # Divisão
e = 4 ^ 2 # Potência
f = 5 %% 3 # Resto da Divisão
g = 5 %/% 3 # Parte Inteira da Divisão
# Constantes especiais
h = pi
i = letters # vetor de letras minusculas
j = LETTERS # vetor de letras maiusculas
k = month.abb # vetor de meses
tVol = pi * 10 ^ 2 * 5
x <- c(TRUE, TRUE, FALSE, FALSE)
y <- c(TRUE, FALSE, TRUE, FALSE)
print(x | y)
a <- 1:5
b <- 8:4
print(a > b)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
print("biomassa1: ", biomassa1)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
print(biomassa1)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
cat("biomassa1: ", biomassa1)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
cat("biomassa1:", biomassa1)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
cat("biomassa1:", biomassa1)
biomassa2 = (-2.6464 + 1.9960 * log(d) + 0.7558 * log(h)) ^ e
cat("biomassa2:", biomassa2)
e = exp(1) # Número de Euler
d = 15 # o diâmetro à altura do peito (dap)
h = 12 # altura
biomassa1 = e ^ -1.7953 * d ^ 2.2974
cat("biomassa1:", biomassa1)
biomassa2 = e ^ (-2.6464 + 1.9960 * log(d) + 0.7558 * log(h))
cat("biomassa2:", biomassa2)
load("C:/Users/victo/Desktop/Databases_Script/salarios.RData")
source("C:/Users/victo/Desktop/Databases_Script/Rotinas_IAA1.R")
summary(salarios$husearns)
summary(salarios$earns)
Q1
Q1 <- quantile(salarios$earns, probs = 0.25)
Q1
Q2 <- quantile(salarios$husearns, probs = 0.50)
Q2
Q3 <- quantile(salarios$husearns, probs = 0.75)
Q3
husearns = salarios$husearns
earns = salarios$earns
IQR(husearns)
IQR(earns)
quantile(husearns, c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
quantile(earns, c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
m <- 150
s <- 36
n <- 36
dam <- s/n^0.5
dam
dam1 <- m + dam
dam2 <- m - dam
dam1
dam2
n <- nrow(salarios)
View(salarios)
m <- mean(salarios$husearns)
m
s <- sd(salarios$husearns)
s <- sd(salarios$husearns)
dam <- s/sqrt(n)
dam
dam1 <- m + dam
dam2 <- m - dam
dam1
dam2
n <- nrow(salarios)
m <- mean(salarios$earns)
m
s <- sd(salarios$earns)
dam <- s/n^0.5
dam1 <- m + dam
dam2 <- m - dam
dam1
dam2
n <- 16
N <- 100
s <- 57
damf <- (s/(n^0.5))*((N-n)/(N-1))^0.5
damf
# Para o rendimento das esposas (earns)
n <- nrow(salarios)
N <- 100000
s <- sd(salarios$earns)
m <- mean(salarios$earns)
m
damf <- (s/sqrt(n))*sqrt((N-n)/(N-1))
damf
dam1 <- m + damf
dam2 <- m - damf
dam1
dam2
mean(salarios$earns)
library(carData)
library(datasets)
library(BSDA)
# install.packages("carData")
# install.packages("datasets")
install.packages("BSDA")
library(carData)
library(datasets)
library(BSDA)
sd <- sd(salarios$husearns)
x <- salarios$husearns
install.packages("carData")
install.packages("carData")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(carData)
library(datasets)
library(BSDA)
sd <- sd(salarios$husearns)
x <- salarios$husearns
options(scipen = 999)
z.test(x, y = NULL, alternative = "two.sided", mu = 0, sigma.x = sd,
sigma.y = NULL, conf.level = 0.95)
qnorm(0.025)
qnorm(0.975)
x <- salarios$husearns
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
t.test(x, y = NULL,
alternative = c("two.sided"),
mu = 450, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, data=salarios)
qt(0.975, df=5633)
qt(0.025, df=5633)
var <- var(salarios$husearns)
n <- nrow(salarios)
chiinf <- qchisq(0.025, df=5633)
chisup <- qchisq(0.975, df=5633)
superior <- ((n-1)*var)/chiinf
inferior <- ((n-1)*var)/chisup
inferior
superior
sdx <- sd(salarios$husearns)
sdy <- sd(salarios$earns)
x <- salarios$husearns
y <- salarios$earns
z.test(x, y, alternative = "two.sided", mu = 0, sigma.x = sdx,
sigma.y = sdy, conf.level = 0.95)
qnorm(0.975)
x <- salarios$husearns[1:100]
y <- salarios$earns[1:100]
var.test(x, y, alternative = "two.sided", conf.level = 0.95)
x <- salarios$husearns[1:100]
y <- salarios$earns[1:100]
t.test(x, y,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
x <- salarios$husearns
x <- salarios$husearns
t.test(x, y,
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
x <- salarios$husearns
y <- salarios$earns
var.test(x, y, alternative = "two.sided", conf.level = 0.95)
qf(0.95, 5633, 5633)
install.packages("ggpubr")
library(ggpubr)
X <- salarios$husearns
y <- salarios$earns
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
X <- salarios$husearns
y <- salarios$earns
t.test(x, y, alternative = "two.sided", var.equal = TRUE)
qt(0.975, df=11266)
X <- salarios$husearns
y <- salarios$earns
options(scipen = 999)
wilcox.test(x, y, alternative = "two.sided")
install.packages("RcmdrMisc")
library(RcmdrMisc)
normalityTest(~earns, test="lillie.test", data=salarios)
normalityTest(~husearns, test="lillie.test", data=salarios)
shapiro.test(salarios$earns)
shapiro.test(salarios$earns[1:5000])
shapiro.test(ceo$sales)
ceo <- read.csv("C:/Users/victo/Desktop/Databases_Script/ceo.txt", sep="")
View(ceo)
shapiro.test(ceo$sales)
hist(ceo$sales)
library(nortest)
ad.test(salarios$earns)
cvm.test(salarios$earns)
hist(salarios$earns)
hist(salarios$age)
cvm.test(salarios$age)
cvm.test(salarios$age)
install.packages('AID')
# install.packages('AID')
library(AID)
data(textile)
hist(textile)
# X11(width = 10, height = 12)
out <- boxcoxnc(textile[,1], method = "sw")
out2$lambda.hat #Estimate of Box-Cox param. based on Shapiro-Francia test stat.
out2$lambda.hat #Estimate of Box-Cox param. based on Shapiro-Francia test stat.
#X11(width = 10, height = 12)
out2 <- boxcoxnc(textile[,1], method = "sf")
out2$lambda.hat #Estimate of Box-Cox param. based on Shapiro-Francia test stat.
out2$p.value # p.value of Shapiro-Francia test for transformed data
out2$tf.data
confInt(out2)
#X11(width = 10, height = 12)
out2 <- boxcoxnc(textile[,1], method = "sf")
out2$lambda.hat #Estimate of Box-Cox param. based on Shapiro-Francia test stat.
out2$p.value # p.value of Shapiro-Francia test for transformed data
out2$tf.data
confInt(out2)
cor(salarios[,c("earns","husearns","age")], use="complete")
hist(outlm$tf.data)
#X11(width = 10, height = 12)
outlm <- boxcoxlm(x = trees[,1:2], y = trees[,3])
hist(outlm$tf.data)
trees=as.matrix(trees)
View(trees)
View(trees)
#X11(width = 10, height = 12)
outlm <- boxcoxlm(x = trees[,1:2], y = trees[,3])
outlm$lambda.hat #Estimate of Box-Cox param. based on Shapiro-Wilk test stat.
outlm$p.value # p.value of Shapiro-Wilk test for transformed data (p-value>0.05)
outlm$tf.residuals # transformed data residuals
outlm$tf.data # transformed data for y variable
cor(salarios[,c("earns","husearns","age")], use="complete")
install.packages("satellite")
library(satellite)
detach("package:satellite", unload = TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
head(Satellite)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
class(Satellite)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
head(data)
class(Satellite)
head(Satellite)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
head(Satellite)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
head(data)
data
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
teste
treino
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
confusionMatrix(predicoes.rf, teste$Species)
confusionMatrix(predicoes.rf, teste$classes)
svm <- train(classes~., data=treino, method="svm")
svm <- train(classes~., data=treino, method="svmRadial")
svm <- train(classes~., data=treino, method="svmRadial")
predicoes.svm <- predict(svm, teste)
confusionMatrix(predicoes.svm, teste$classes)
rna <- train(classes~., data=treino, method="nnet", trace=FALSE)
predicoes.rna <- predict(rna, teste$classes)
predicoes.rna <- predict(rna, teste)
confusionMatrix(predicoes.rna, teste$classes)
confusionMatrix(predicoes.rf, teste$classes)
confusionMatrix(predicoes.svm, teste$classes)
confusionMatrix(predicoes.rna, teste$classes)
confusionMatrix(predicoes.rf, teste$classes)
confusionMatrix(predicoes.svm, teste$classes)
confusionMatrix(predicoes.rna, teste$classes)
confusionMatrix(predicoes.svm, teste$classes)
confusionMatrix(predicoes.rna, teste$classes)
svmFinal <- train(classes~., data=data, method="svmRadial")
predicoes.svmFinal <- predict(svmFinal, teste)
confusionMatrix(predicoes.svmFinal, teste$classes)
View(svmFinal)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
source("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina/scripts.R", echo=TRUE)
confusionMatrix(predicoes.rf, teste$classes)
confusionMatrix(predicoes.svm, teste$classes)
confusionMatrix(predicoes.rna, teste$classes)
svmFinal <- train(classes~., data=data, method="svmRadial")
predicoes.svmFinal <- predict(svmFinal, teste)
confusionMatrix(predicoes.svmFinal, teste$classes)
print(svm)
library("kernlab")
final_model <- ksvm(
type="C-svc",
classes~.,
data=data,
kernel="rbfdot",
C=1.0,
kpar=list(sigma=0.86087)
)
View(final_model)
# # Gerando a predição do modelo usando a base total de dados
final_predict.svm <- predict(final_model, dados)
# # Gerando a predição do modelo usando a base total de dados
final_predict.svm <- predict(final_model, dada)
# # Gerando a predição do modelo usando a base total de dados
final_predict.svm <- predict(final_model, data)
# Vendo a nova matriz de confusão desse modelo total
confusionMatrix(final_predict.svm, data$classes)
# Salvando o modelo em um arquivo .RDS
saveRDS(final_model, "satellite_svm.rds")
setwd("G:/Meu Drive/UFPR/IAA/Matérias/IAA004 - 2023 - Linguagem R/Trabalho da Disciplina")
# Salvando o modelo em um arquivo .RDS
saveRDS(final_model, "satellite_svm.rds")
